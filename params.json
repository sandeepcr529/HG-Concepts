{"name":"Mercurial","tagline":"A beginners guide to concepts and workflows","body":"# Concepts\r\n\r\n### Version Control Systems\r\n\r\nA version control system is an essential part of software development. Starting a project with out some kind of version control is similar to venturing deep into a thick forest with no way to find your way back. It gives context for your code. Every line of code you write will ultimately become part of a single commit with a clear purpose. \r\n\r\nAny version control system will have three main entities. The tracked files, the working directory and the repository.\r\n\r\n###The Tracked Files\r\n\r\nA code version system is a system to manage the source code of your project. But your project will almost always contains files that are not code/text. This includes binary files like images, videos, user uploaded files. There will be log files that does not make much sense to be version controlled. These files can be excluded from version control. So you have a set of files that you want to be \r\nversion controlled or 'tracked' by mercurial, and you have a set of files that you don't want it to track.\r\n\r\nWhen a new mercurial repository is created, there will be no tracked files initially. You have to manually add all files that are to be tracked. This is done by a command, `hg add`, which we will see in detail later.\r\n\r\n### The Working Directory\r\n\r\nThe working directory is the directory that hold all the files of your project, tracked or not. We will come back to this later.\r\n\r\n### The Repository or Repo\r\n\r\nA mercurial repository takes the form of a directory named .hg in the root of your working directory. \r\nYou create a mercurial repository for your project by running the command from the root of your project folder.\r\n\r\n`hg init`\r\n\r\nThis creates the .hg directory. For all intents and purposes, this IS the repository. After a while it will contain all the history of your project(tracked files) from the beginning of time. You can copy this directory to a different location and you will have a repository there. \r\n\r\n### The Changeset or Revision\r\n\r\nIn mercurial, the history of a project is recorded as a series of changesets or revisions. A revision  can be identified by a changeset id **or** revision number. A changeset id is hash like 'ad78e3810360', but a revision number is a simple number like 100. The revision number of first commit will be 0, then next one will be 1 and so on. You can refer to a revision by using its changeset id or revision number. Will come back to this later.\r\n\r\nA revision is added to the history when you do a commit operation. **When you do a commit operation, the state of all tracked files are recorded and stored in the newly created revision.** \r\n\r\n### The Parent\r\n\r\nWhen you update the working directory to a revision `x`, all the tracked files will be updated to the exact same state, when the commit `x` was made. Then we say that the working directory is based on the revision `x`. In other words, the parent of working directory is revision `x`. \r\n\r\nThis also happens when you make a commit. Suppose the current parent of the working directory is `x`. Suppose you edit some files and did a commit and the new resulting revision be `y`. Then `y` will be added to the history as a child of `x`. And the current parent of working directory will be set to `y`.\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}